# views.py

# views.py

from rest_framework.response import Response
from rest_framework.decorators import api_view
from rest_framework import status
from .models import User
from .serializer import UserSerializer
from .paginations import CustomPagination



@api_view(['GET'])
def getUserDetail(request, pk):
    try:
        user = User.objects.get(pk=pk)
    except User.DoesNotExist:
        return Response(status=status.HTTP_404_NOT_FOUND)

    serializer = UserSerializer(user)
    return Response(serializer.data)


@api_view(['GET', 'POST'])
def getUser(request):
    if request.method == 'GET':
        queryset = User.objects.all()
        
        # Basic Filtering
        city = request.GET.get('city', None)
        age = request.GET.get('age', None)
        
        if city:
            queryset = queryset.filter(city=city)
        if age:
            queryset = queryset.filter(age=age)
        
        paginator = CustomPagination()
        paginated_queryset = paginator.paginate_queryset(queryset, request)
        serializer = UserSerializer(paginated_queryset, many=True)
        return paginator.get_paginated_response(serializer.data)
    
    elif request.method == 'POST':
        serializer = UserSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

##urls.py

# urls.py

from django.urls import path
from .views import getUser, getUserDetail

urlpatterns = [
    path('users/', getUser, name='user-list'),           # Handles GET and POST requests
    path('users/<int:pk>/', getUserDetail, name='user-detail'), # Handles GET request for a specific user
    # path('users/<int:pk>/update/', putUser, name='user-update'), # Handles PUT requests
    # path('users/<int:pk>/delete/', deleteUser, name='user-delete'), # Handles DELETE requests
]
#Seralizer

from rest_framework import serializers
from .models import User

class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = '__all__'
        
    def validate(self, data):
        name = data.get('name')
        if User.objects.filter(name=name).exists():
            raise serializers.ValidationError("this name already exists.")
        return data
        
    def validate(self, data):
        city = data.get('city')
        if User.objects.filter(city=city).exists():
            raise serializers.ValidationError("city already exists.")
        return data
